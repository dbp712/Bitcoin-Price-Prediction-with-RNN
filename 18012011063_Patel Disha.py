# -*- coding: utf-8 -*-
"""DL_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E-UW0mcl_YxnOhT27uP5oyBBNJY44kA6

Name : Patel Disha Bharatbhai

Enrollment no : 18012011063

Batch : DL1

#Import Libarary
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math
import seaborn as sns
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error

"""#Data reading"""

df = pd.read_csv("/content/bitstampUSD_1-min_data_2012-01-01_to_2021-03-31.csv")
df.head()

"""#Data Preparation"""

df.info()

df.columns

df.isnull().sum()

df = df.dropna()
df.head()

df['date'] = pd.to_datetime(df['Timestamp'],unit='s').dt.date
group = df.groupby('date')
real_price = group['Weighted_Price'].mean()

real_price

df.info()

df.corr()

df.describe()

# Line Plot

df.Weighted_Price.plot(kind = "line", color = "g", label = "Weighted_Price",linewidth=1,alpha=0.5,grid=True,linestyle=':')

plt.legend(loc="upper right")   
plt.xlabel("x axis")            
plt.ylabel("y axis")           
plt.title("Line Plot for Weighted_Price") 

plt.show()

# Scatter Plot 
# x = Volume_(BTC), y = Volume_(Currency)
df.plot(kind='scatter', x='Volume_(BTC)', y='Volume_(Currency)',alpha = 0.5,color = 'green')
plt.xlabel('BTC')              
plt.ylabel('Currency')
plt.title('BTC - Currency Scatter Plot')
plt.show()

# split data
prediction_days = 30
df_train=real_price[:len(real_price)-prediction_days]
df_test=real_price[len(real_price)-prediction_days:]

# Data preprocess
training_set = df_train.values
training_set = np.reshape(training_set, (len(training_set), 1))

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler()
training_set = sc.fit_transform(training_set)
X_train = training_set[0:len(training_set)-1]
y_train = training_set[1:len(training_set)]
X_train = np.reshape(X_train, (len(X_train), 1, 1))

### Importing the Keras libraries and packages
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import SimpleRNN
from keras.layers import Dropout

# Initialising the RNN
regressor = Sequential()

# Adding the first RNN layer and some Dropout regularisation
regressor.add(SimpleRNN(units = 50,activation='tanh', return_sequences = True, input_shape = (X_train.shape[1], 1)))
regressor.add(Dropout(0.2))

# Adding a second RNN layer and some Dropout regularisation
regressor.add(SimpleRNN(units = 50,activation='tanh', return_sequences = True))
regressor.add(Dropout(0.2))

# Adding a third RNN layer and some Dropout regularisation
regressor.add(SimpleRNN(units = 50,activation='tanh', return_sequences = True))
regressor.add(Dropout(0.2))

# Adding a fourth RNN layer and some Dropout regularisation
regressor.add(SimpleRNN(units = 50))
regressor.add(Dropout(0.2))

# Adding the output layer
regressor.add(Dense(units = 1))

# Compiling the RNN
regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')

# Fitting the RNN to the Training set
regressor.fit(X_train, y_train, epochs = 100, batch_size = 32)
# epoch= 250

"""#Making the predicitions """

test_set = df_test.values
inputs = np.reshape(test_set, (len(test_set), 1))
inputs = sc.transform(inputs)
inputs = np.reshape(inputs, (len(inputs), 1, 1))
predicted_btc_price = regressor.predict(inputs)
predicted_btc_price = sc.inverse_transform(predicted_btc_price)

"""#Visualisierung the Results"""

plt.figure(figsize = (20,7))
plt.plot(test_set)
plt.plot(predicted_btc_price)
plt.xlabel('Time')
plt.ylabel('Price')
plt.title('Closing Price vs Time')
plt.legend(['Actual price', 'Predicted price'])
plt.show()